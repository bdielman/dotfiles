" BASIC SETTINGS
" ------------------------

" Remove compatibility with vi
set nocompatible

" Add minpac and vim packages
source ~/.dotfiles/vim/packages.vim

" Filetype settings
filetype on
filetype plugin on
filetype indent on

" Turn on syntax highlighting
syntax on

" Remap leader
let mapleader = ","

" Fix issues mistyping :w and :q
command! W :w
command! Q :q
command! WQ :wq
command! Wq :wq

" For mistyping noh constantly
command! Noh :noh

" Keep buffers around after closing
set hidden

" Don't update the display while executing macros
set lazyredraw

" Show incomplete cmds down the bottom
set showcmd

" Prevent mode from displaying
set noshowmode

" Add line numbers
set number

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Highlight current column
set cursorcolumn

" Highlight current line
set cursorline

" Set commandbar height
set cmdheight=2

" Make tab completion act more like bash
set wildmenu
set wildmode=list:longest
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set expandtab
set colorcolumn=80

" Make omnicomplete a bit easier
imap <Leader>o <C-x><C-o>

" Make backspace work as expected
set backspace=indent,eol,start

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Status Line
function! GetGitBranchName()
  let branchName = ""

  if exists("g:loaded_fugitive")
    let branchName = "[" . fugitive#head() . "]"
  endif

  return branchName
endfunction

set statusline=%f%m%r%h%w\ %y\ %{GetGitBranchName()}\ %=[%c,%l/%L]\ [%p%%]
set laststatus=2

" No swap files
set nobackup
set nowritebackup
set noswapfile

" Disable error bells
set noerrorbells
set visualbell
set t_vb=


" COLORSCHEMES
" ------------------------

if (has("termguicolors"))
  set termguicolors
endif

colorscheme gruvbox

let g:gruvbox_contrast = 'medium'


" PLUGINS
" ------------------------

" Fugitive settings
let g:fugitive_github_domains = ['https://example.com']
let g:fugitive_dynamic_colors = 0

" Add JSX support for js files
let g:jsx_ext_required = 0

" Allow CtrlP to ignore certain directories and include dotfiles
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]((\.(git|bundle))|(node_modules|tmp|log|vendor\/bundle))'
      \ }

" Setup Prettier with ALE
let g:ale_fixers = {
      \ 'css': ['prettier'],
      \ 'scss': ['prettier'],
      \ 'javascript': ['prettier'],
      \ 'typescript': ['prettier'],
      \ 'json': ['prettier']
      \ }
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1

" Jump between errors with ALE
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Allow Emmet to recognize JSX
let g:user_emmet_settings = {
      \ 'javascript.jsx': {
      \   'extends': 'jsx',
      \ },
      \ }

" Lightline settings
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'lineinfo': ' %3l:%-2v',
      \ },
      \ 'component_function': {
      \   'readonly': 'LightlineReadonly',
      \   'gitbranch': 'LightlineFugitive'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightlineFugitive()
  if exists('*fugitive#head')
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction
