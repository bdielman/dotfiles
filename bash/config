#!/bin/bash

# bash_prompt

# Example:
# braddielman@host: ~/.dotfiles on master [+!?$]
# $

# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "$1$branchName$s"
    else
        return
    fi
}

function current_ruby() {
  echo "$(rbenv version-name)"
}

# Prompt symbol
prompt_symbol="‚ùØ"

set_prompts() {
    local reset=""
    local black=""
    local red=""
    local green=""
    local yellow=""
    local blue=""
    local purple=""
    local cyan=""
    local white=""

    reset="\e[0m"
    black="\e[1;30m"
    red="\e[1;31m"
    green="\e[1;32m"
    yellow="\e[1;33m"
    blue="\e[1;34m"
    purple="\e[1;35m"
    cyan="\e[1;36m"
    white="\e[1;37m"

    # build the prompt

    # set the terminal title to the current working directory
    PS1="\[\033]0;\w\007\]"

    PS1+="\n" # newline
    PS1+="\[$reset$cyan\]\w" # working directory
    PS1+="\$(prompt_git \" $reset$green\")" # git repository details
    PS1+="\[$reset$yellow\] [\$(current_ruby)]" # rbenv details
    PS1+="\n"
    PS1+="\[$reset$purple\]\$prompt_symbol \[$reset\]" # $ (and reset color)

    export PS1
}

set_prompts
unset set_prompts
